{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","components/styles/StyledStage.js","components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","hooks/usePlayer.js","hooks/useStage.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","StyledStage","props","height","width","StyledCell","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","React","memo","Stage","map","row","cell","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","reduce","acc","findIndex","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","console","log","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cc780c3d.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () => \r\n    Array.from(Array(STAGE_HEIGHT), () => \r\n        new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n    )\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n    for(let y = 0; y < player.tetromino.length; y += 1) {\r\n        for(let x = 0; x < player.tetromino[y].length; x += 1) {\r\n            // 1. Check that we are on a tetromino cell\r\n            if(player.tetromino[y][x] !== 0) {\r\n                if(\r\n                // 2. Check that our move is inside game area (y)\r\n                // We shouldn't go through the bottom of the play area\r\n                !stage[y + player.pos.y + moveY] || \r\n                // 3. Check that our move is inside game areas width (x)\r\n                !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                // 4. Check that the cell we're moving to isn't set to clear\r\n                stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n    font-family: Arial;\r\n    text-align: center;\r\n    color: white;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    }\r\n`","import styled from 'styled-components';\r\n\r\nexport const StyledStage =styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height}, calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(\r\n        ${props => props.width}, 1fr\r\n    );\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, 0.8);\r\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n`","export const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0, 0, 0' },\r\n    I: { \r\n        shape: [\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0]\r\n        ], color: '80, 227, 230' },\r\n    J: {\r\n        shape: [\r\n            [0, 'J', 0],\r\n            [0, 'J', 0],\r\n            ['J', 'J', 0]\r\n        ], color: '36, 95, 223'\r\n    },\r\n    L: {\r\n        shape: [\r\n            [0, 'L', 0],\r\n            [0, 'L', 0],\r\n            [0, 'L', 'L']\r\n        ], color: '223, 173, 36'\r\n    },\r\n    O: {\r\n        shape: [\r\n            ['O', 'O'],\r\n            ['O', 'O']\r\n        ], color: '223, 217, 36'\r\n    },\r\n    S: {\r\n        shape: [\r\n            [0, 'S', 'S'],\r\n            ['S', 'S', 0],\r\n            [0, 0, 0]\r\n        ], color: '48, 211, 56'\r\n    },\r\n    T: {\r\n        shape: [\r\n            [0, 0, 0],\r\n            ['T', 'T', 'T'],\r\n            [0, 'T', 0]\r\n        ], color: '132, 61, 198'\r\n    },\r\n    Z: {\r\n        shape: [\r\n            ['Z', 'Z', 0],\r\n            [0, 'Z', 'Z'],\r\n            [0, 0, 0]\r\n        ], color: '227, 78, 78'\r\n    },\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = \"IJLOSTZ\";\r\n\r\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n\r\n    return TETROMINOS[randTetromino];\r\n}","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n    <StyledCell type={type} color={TETROMINOS[type].color} />\r\n)\r\n\r\nexport default React.memo(Cell);","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n    </StyledStage>\r\n)\r\n\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? 'red' : '#999')};\r\n    background: #000;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 0.8rem;\r\n`","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n    <StyledDisplay gameOver={gameOver}>\r\n        {text}\r\n    </StyledDisplay>\r\n);\r\n\r\nexport default Display;","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color: white;\r\n    background: #333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 1rem;\r\n    outline; none;\r\n    cursor: pointer;\r\n`","import React from 'react';\r\nimport { StyledStartButton } from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n)\r\n\r\nexport default StartButton;","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    });\r\n\r\n    const rotate = (matrix, dir) => {\r\n        // Make the rows become columns (transpose)\r\n        const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]));\r\n        // Reverse each row to get a rotated matrix\r\n        if(dir > 0) return rotatedTetro.map(row => row.reverse());\r\n        return rotatedTetro.reverse();\r\n    }\r\n\r\n    const playerRotate = (stage, dir) => {\r\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n        const pos = clonedPlayer.pos.x;\r\n        let offset = 1;\r\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n            clonedPlayer.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n            if (offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -dir);\r\n                clonedPlayer.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n\r\n        setPlayer(clonedPlayer);\r\n    }\r\n\r\n    const updatePlayerPos = ({ x, y, collided }) =>  {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\r\n            collided,\r\n        }))\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n            tetromino: randomTetromino().shape,\r\n            collided: false\r\n        });\r\n    }, []);\r\n\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n}","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n\r\n        const sweepRows = newStage => \r\n            newStage.reduce((acc, row) => {\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev + 1);\r\n                    acc.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n                    return acc;\r\n                }\r\n                acc.push(row);\r\n                return acc;\r\n            }, [])\r\n        const updateStage = prevStage => {\r\n            // First flush stage\r\n            const newStage = prevStage.map(row => \r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n            );\r\n\r\n            // Then draw tetromino\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if(value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? 'merged' : 'clear'}`,\r\n                        ]\r\n                    }\r\n                })\r\n            });\r\n            // Check for collision\r\n            if(player.collided) {\r\n                resetPlayer();\r\n                return sweepRows(newStage);\r\n            }\r\n            return newStage;\r\n        };\r\n\r\n        setStage(prev => updateStage(prev));\r\n    }, [player, resetPlayer]);\r\n\r\n    return [stage, setStage, rowsCleared];\r\n}","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\n\r\n// Styled Components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\n// Custom hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\nconst Tetris = () => {\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n    console.log('re-render');\r\n\r\n    const movePlayer = dir => {\r\n        if(!checkCollision(player, stage, {x: dir, y: 0})){\r\n            updatePlayerPos({ x: dir, y: 0});\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        // Reset everything\r\n        setStage(createStage());\r\n        setDropTime(1000);\r\n        resetPlayer();\r\n        setGameOver(false);\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n    }\r\n\r\n    const drop = () => {\r\n        // Increase level when 10 rows cleared\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n            // Also increase speed\r\n            setDropTime(1000 / (level + 1) + 200);\r\n        }\r\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n            updatePlayerPos({ x: 0, y: 1, collided: false});\r\n        } else {\r\n            // Game over\r\n            if (player.pos.y < 1) {\r\n                console.log(\"Game over\");\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updatePlayerPos({ x: 0, y: 0, collided: true})\r\n        }\r\n    }\r\n\r\n    const keyUp = ({ keyCode }) => {\r\n        if(!gameOver) {\r\n            if (keyCode === 40 || keyCode === 83) {\r\n                setDropTime(1000 / (level + 1) + 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n        setDropTime(null);\r\n        drop();\r\n    }\r\n\r\n    const move = ({ keyCode }) => {\r\n        if(!gameOver) {\r\n            if(keyCode === 37 || keyCode === 65) {\r\n                movePlayer(-1);\r\n            } else if(keyCode === 39 || keyCode === 68) {\r\n                movePlayer(1);\r\n            } else if(keyCode === 40 || keyCode === 83) {\r\n                dropPlayer();\r\n            } else if(keyCode === 38 || keyCode === 87) {\r\n                playerRotate(stage, 1);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    useInterval(() =>  {\r\n        drop();\r\n    }, dropTime)\r\n\r\n    return (\r\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\r\n            <h1>Tetris Clone</h1>\r\n            <StyledTetris>\r\n                \r\n                <Stage stage={stage} />\r\n                <aside>\r\n                    {gameOver ? (\r\n                        <Display gameOver={gameOver} text=\"Game Over\" />\r\n                    ) : (\r\n                        <div>\r\n                            <Display text={`Score: ${score}`} />\r\n                            <Display text={`Rows: ${rows}`} />\r\n                            <Display text={`Level: ${level}`} />\r\n                        </div>\r\n                    )}\r\n                    <StartButton callback={startGame} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    )\r\n};\r\n\r\nexport default Tetris;","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        if(rowsCleared > 0) {\r\n            // Original Tetris score calculation\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n    }, [level, linePoints, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score]);\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n}","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from 'react';\r\nimport Tetris from './components/Tetris';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <Tetris />\r\n  </div>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}